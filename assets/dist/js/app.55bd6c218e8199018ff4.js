!function(e){var n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(r,a,function(n){return e[n]}.bind(null,a));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n,t){t(1),e.exports=t(4)},function(e,n){
/*!	
* FitText.js 1.0 jQuery free version
*
* Copyright 2011, Dave Rupert http://daverupert.com 
* Released under the WTFPL license 
* http://sam.zoy.org/wtfpl/
* Modified by Slawomir Kolodziej http://slawekk.info
*
* Date: Tue Aug 09 2011 10:45:54 GMT+0200 (CEST)
*/
var t;t=function(e,n,t){e.addEventListener?e.addEventListener(n,t,!1):e.attachEvent("on"+n,t)},window.fitText=function(e,n,r){var a=function(e,n){for(var t in n)n.hasOwnProperty(t)&&(e[t]=n[t]);return e}({minFontSize:-1/0,maxFontSize:1/0},r),o=function(e){var r=n||1,o=function(){e.style.fontSize=Math.max(Math.min(e.clientWidth/(10*r),parseFloat(a.maxFontSize)),parseFloat(a.minFontSize))+"px"};o(),t(window,"resize",o),t(window,"orientationchange",o)};if(e.length)for(var i=0;i<e.length;i++)o(e[i]);else o(e);return e}},,,function(e,n,t){"use strict";t.r(n);var r={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},a={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},o=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],i={CSS:{},springs:{}};function u(e,n,t){return Math.min(Math.max(e,n),t)}function c(e,n){return e.indexOf(n)>-1}function s(e,n){return e.apply(null,n)}var l={arr:function(e){return Array.isArray(e)},obj:function(e){return c(Object.prototype.toString.call(e),"Object")},pth:function(e){return l.obj(e)&&e.hasOwnProperty("totalLength")},svg:function(e){return e instanceof SVGElement},inp:function(e){return e instanceof HTMLInputElement},dom:function(e){return e.nodeType||l.svg(e)},str:function(e){return"string"==typeof e},fnc:function(e){return"function"==typeof e},und:function(e){return void 0===e},hex:function(e){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(e)},rgb:function(e){return/^rgb/.test(e)},hsl:function(e){return/^hsl/.test(e)},col:function(e){return l.hex(e)||l.rgb(e)||l.hsl(e)},key:function(e){return!r.hasOwnProperty(e)&&!a.hasOwnProperty(e)&&"targets"!==e&&"keyframes"!==e}};function f(e){var n=/\(([^)]+)\)/.exec(e);return n?n[1].split(",").map((function(e){return parseFloat(e)})):[]}function d(e,n){var t=f(e),r=u(l.und(t[0])?1:t[0],.1,100),a=u(l.und(t[1])?100:t[1],.1,100),o=u(l.und(t[2])?10:t[2],.1,100),c=u(l.und(t[3])?0:t[3],.1,100),s=Math.sqrt(a/r),d=o/(2*Math.sqrt(a*r)),p=d<1?s*Math.sqrt(1-d*d):0,v=d<1?(d*s-c)/p:-c+s;function m(e){var t=n?n*e/1e3:e;return t=d<1?Math.exp(-t*d*s)*(1*Math.cos(p*t)+v*Math.sin(p*t)):(1+v*t)*Math.exp(-t*s),0===e||1===e?e:1-t}return n?m:function(){var n=i.springs[e];if(n)return n;for(var t=0,r=0;;)if(1===m(t+=1/6)){if(++r>=16)break}else r=0;var a=t*(1/6)*1e3;return i.springs[e]=a,a}}function p(e){return void 0===e&&(e=10),function(n){return Math.ceil(u(n,1e-6,1)*e)*(1/e)}}var v,m,h=function(){function e(e,n){return 1-3*n+3*e}function n(e,n){return 3*n-6*e}function t(e){return 3*e}function r(r,a,o){return((e(a,o)*r+n(a,o))*r+t(a))*r}function a(r,a,o){return 3*e(a,o)*r*r+2*n(a,o)*r+t(a)}return function(e,n,t,o){if(0<=e&&e<=1&&0<=t&&t<=1){var i=new Float32Array(11);if(e!==n||t!==o)for(var u=0;u<11;++u)i[u]=r(.1*u,e,t);return function(a){return e===n&&t===o||0===a||1===a?a:r(c(a),n,o)}}function c(n){for(var o=0,u=1;10!==u&&i[u]<=n;++u)o+=.1;--u;var c=o+.1*((n-i[u])/(i[u+1]-i[u])),s=a(c,e,t);return s>=.001?function(e,n,t,o){for(var i=0;i<4;++i){var u=a(n,t,o);if(0===u)return n;n-=(r(n,t,o)-e)/u}return n}(n,c,e,t):0===s?c:function(e,n,t,a,o){var i,u,c=0;do{(i=r(u=n+(t-n)/2,a,o)-e)>0?t=u:n=u}while(Math.abs(i)>1e-7&&++c<10);return u}(n,o,o+.1,e,t)}}}(),g=(v={linear:function(){return function(e){return e}}},m={Sine:function(){return function(e){return 1-Math.cos(e*Math.PI/2)}},Circ:function(){return function(e){return 1-Math.sqrt(1-e*e)}},Back:function(){return function(e){return e*e*(3*e-2)}},Bounce:function(){return function(e){for(var n,t=4;e<((n=Math.pow(2,--t))-1)/11;);return 1/Math.pow(4,3-t)-7.5625*Math.pow((3*n-2)/22-e,2)}},Elastic:function(e,n){void 0===e&&(e=1),void 0===n&&(n=.5);var t=u(e,1,10),r=u(n,.1,2);return function(e){return 0===e||1===e?e:-t*Math.pow(2,10*(e-1))*Math.sin((e-1-r/(2*Math.PI)*Math.asin(1/t))*(2*Math.PI)/r)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(e,n){m[e]=function(){return function(e){return Math.pow(e,n+2)}}})),Object.keys(m).forEach((function(e){var n=m[e];v["easeIn"+e]=n,v["easeOut"+e]=function(e,t){return function(r){return 1-n(e,t)(1-r)}},v["easeInOut"+e]=function(e,t){return function(r){return r<.5?n(e,t)(2*r)/2:1-n(e,t)(-2*r+2)/2}}})),v);function y(e,n){if(l.fnc(e))return e;var t=e.split("(")[0],r=g[t],a=f(e);switch(t){case"spring":return d(e,n);case"cubicBezier":return s(h,a);case"steps":return s(p,a);default:return s(r,a)}}function b(e){try{return document.querySelectorAll(e)}catch(e){return}}function w(e,n){for(var t=e.length,r=arguments.length>=2?arguments[1]:void 0,a=[],o=0;o<t;o++)if(o in e){var i=e[o];n.call(r,i,o,e)&&a.push(i)}return a}function x(e){return e.reduce((function(e,n){return e.concat(l.arr(n)?x(n):n)}),[])}function M(e){return l.arr(e)?e:(l.str(e)&&(e=b(e)||e),e instanceof NodeList||e instanceof HTMLCollection?[].slice.call(e):[e])}function L(e,n){return e.some((function(e){return e===n}))}function k(e){var n={};for(var t in e)n[t]=e[t];return n}function C(e,n){var t=k(e);for(var r in e)t[r]=n.hasOwnProperty(r)?n[r]:e[r];return t}function E(e,n){var t=k(e);for(var r in n)t[r]=l.und(e[r])?n[r]:e[r];return t}function O(e){return l.rgb(e)?(t=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(n=e))?"rgba("+t[1]+",1)":n:l.hex(e)?function(e){var n=e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(e,n,t,r){return n+n+t+t+r+r})),t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return"rgba("+parseInt(t[1],16)+","+parseInt(t[2],16)+","+parseInt(t[3],16)+",1)"}(e):l.hsl(e)?function(e){var n,t,r,a=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(e)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(e),o=parseInt(a[1],10)/360,i=parseInt(a[2],10)/100,u=parseInt(a[3],10)/100,c=a[4]||1;function s(e,n,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?e+6*(n-e)*t:t<.5?n:t<2/3?e+(n-e)*(2/3-t)*6:e}if(0==i)n=t=r=u;else{var l=u<.5?u*(1+i):u+i-u*i,f=2*u-l;n=s(f,l,o+1/3),t=s(f,l,o),r=s(f,l,o-1/3)}return"rgba("+255*n+","+255*t+","+255*r+","+c+")"}(e):void 0;var n,t}function S(e){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(e);if(n)return n[1]}function P(e,n){return l.fnc(e)?e(n.target,n.id,n.total):e}function T(e,n){return e.getAttribute(n)}function I(e,n,t){if(L([t,"deg","rad","turn"],S(n)))return n;var r=i.CSS[n+t];if(!l.und(r))return r;var a=document.createElement(e.tagName),o=e.parentNode&&e.parentNode!==document?e.parentNode:document.body;o.appendChild(a),a.style.position="absolute",a.style.width=100+t;var u=100/a.offsetWidth;o.removeChild(a);var c=u*parseFloat(n);return i.CSS[n+t]=c,c}function j(e,n,t){if(n in e.style){var r=n.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),a=e.style[n]||getComputedStyle(e).getPropertyValue(r)||"0";return t?I(e,a,t):a}}function B(e,n){return l.dom(e)&&!l.inp(e)&&(T(e,n)||l.svg(e)&&e[n])?"attribute":l.dom(e)&&L(o,n)?"transform":l.dom(e)&&"transform"!==n&&j(e,n)?"css":null!=e[n]?"object":void 0}function F(e){if(l.dom(e)){for(var n,t=e.style.transform||"",r=/(\w+)\(([^)]*)\)/g,a=new Map;n=r.exec(t);)a.set(n[1],n[2]);return a}}function N(e,n,t,r){var a=c(n,"scale")?1:0+function(e){return c(e,"translate")||"perspective"===e?"px":c(e,"rotate")||c(e,"skew")?"deg":void 0}(n),o=F(e).get(n)||a;return t&&(t.transforms.list.set(n,o),t.transforms.last=n),r?I(e,o,r):o}function A(e,n,t,r){switch(B(e,n)){case"transform":return N(e,n,r,t);case"css":return j(e,n,t);case"attribute":return T(e,n);default:return e[n]||0}}function q(e,n){var t=/^(\*=|\+=|-=)/.exec(e);if(!t)return e;var r=S(e)||0,a=parseFloat(n),o=parseFloat(e.replace(t[0],""));switch(t[0][0]){case"+":return a+o+r;case"-":return a-o+r;case"*":return a*o+r}}function D(e,n){if(l.col(e))return O(e);if(/\s/g.test(e))return e;var t=S(e),r=t?e.substr(0,e.length-t.length):e;return n?r+n:r}function _(e,n){return Math.sqrt(Math.pow(n.x-e.x,2)+Math.pow(n.y-e.y,2))}function z(e){for(var n,t=e.points,r=0,a=0;a<t.numberOfItems;a++){var o=t.getItem(a);a>0&&(r+=_(n,o)),n=o}return r}function H(e){if(e.getTotalLength)return e.getTotalLength();switch(e.tagName.toLowerCase()){case"circle":return function(e){return 2*Math.PI*T(e,"r")}(e);case"rect":return function(e){return 2*T(e,"width")+2*T(e,"height")}(e);case"line":return function(e){return _({x:T(e,"x1"),y:T(e,"y1")},{x:T(e,"x2"),y:T(e,"y2")})}(e);case"polyline":return z(e);case"polygon":return function(e){var n=e.points;return z(e)+_(n.getItem(n.numberOfItems-1),n.getItem(0))}(e)}}function Z(e,n){var t=n||{},r=t.el||function(e){for(var n=e.parentNode;l.svg(n)&&l.svg(n.parentNode);)n=n.parentNode;return n}(e),a=r.getBoundingClientRect(),o=T(r,"viewBox"),i=a.width,u=a.height,c=t.viewBox||(o?o.split(" "):[0,0,i,u]);return{el:r,viewBox:c,x:c[0]/1,y:c[1]/1,w:i/c[2],h:u/c[3]}}function Y(e,n){function t(t){void 0===t&&(t=0);var r=n+t>=1?n+t:0;return e.el.getPointAtLength(r)}var r=Z(e.el,e.svg),a=t(),o=t(-1),i=t(1);switch(e.property){case"x":return(a.x-r.x)*r.w;case"y":return(a.y-r.y)*r.h;case"angle":return 180*Math.atan2(i.y-o.y,i.x-o.x)/Math.PI}}function W(e,n){var t=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,r=D(l.pth(e)?e.totalLength:e,n)+"";return{original:r,numbers:r.match(t)?r.match(t).map(Number):[0],strings:l.str(e)||n?r.split(t):[]}}function X(e){return w(e?x(l.arr(e)?e.map(M):M(e)):[],(function(e,n,t){return t.indexOf(e)===n}))}function Q(e){var n=X(e);return n.map((function(e,t){return{target:e,id:t,total:n.length,transforms:{list:F(e)}}}))}function V(e,n){var t=k(n);if(/^spring/.test(t.easing)&&(t.duration=d(t.easing)),l.arr(e)){var r=e.length;2===r&&!l.obj(e[0])?e={value:e}:l.fnc(n.duration)||(t.duration=n.duration/r)}var a=l.arr(e)?e:[e];return a.map((function(e,t){var r=l.obj(e)&&!l.pth(e)?e:{value:e};return l.und(r.delay)&&(r.delay=t?0:n.delay),l.und(r.endDelay)&&(r.endDelay=t===a.length-1?n.endDelay:0),r})).map((function(e){return E(e,t)}))}function G(e,n){var t=[],r=n.keyframes;for(var a in r&&(n=E(function(e){for(var n=w(x(e.map((function(e){return Object.keys(e)}))),(function(e){return l.key(e)})).reduce((function(e,n){return e.indexOf(n)<0&&e.push(n),e}),[]),t={},r=function(r){var a=n[r];t[a]=e.map((function(e){var n={};for(var t in e)l.key(t)?t==a&&(n.value=e[t]):n[t]=e[t];return n}))},a=0;a<n.length;a++)r(a);return t}(r),n)),n)l.key(a)&&t.push({name:a,tweens:V(n[a],e)});return t}function R(e,n){var t;return e.tweens.map((function(r){var a=function(e,n){var t={};for(var r in e){var a=P(e[r],n);l.arr(a)&&1===(a=a.map((function(e){return P(e,n)}))).length&&(a=a[0]),t[r]=a}return t.duration=parseFloat(t.duration),t.delay=parseFloat(t.delay),t}(r,n),o=a.value,i=l.arr(o)?o[1]:o,u=S(i),c=A(n.target,e.name,u,n),s=t?t.to.original:c,f=l.arr(o)?o[0]:s,d=S(f)||S(c),p=u||d;return l.und(i)&&(i=s),a.from=W(f,p),a.to=W(q(i,f),p),a.start=t?t.end:0,a.end=a.start+a.delay+a.duration+a.endDelay,a.easing=y(a.easing,a.duration),a.isPath=l.pth(o),a.isColor=l.col(a.from.original),a.isColor&&(a.round=1),t=a,a}))}var J={css:function(e,n,t){return e.style[n]=t},attribute:function(e,n,t){return e.setAttribute(n,t)},object:function(e,n,t){return e[n]=t},transform:function(e,n,t,r,a){if(r.list.set(n,t),n===r.last||a){var o="";r.list.forEach((function(e,n){o+=n+"("+e+") "})),e.style.transform=o}}};function K(e,n){Q(e).forEach((function(e){for(var t in n){var r=P(n[t],e),a=e.target,o=S(r),i=A(a,t,o,e),u=q(D(r,o||S(i)),i),c=B(a,t);J[c](a,t,u,e.transforms,!0)}}))}function U(e,n){return w(x(e.map((function(e){return n.map((function(n){return function(e,n){var t=B(e.target,n.name);if(t){var r=R(n,e),a=r[r.length-1];return{type:t,property:n.name,animatable:e,tweens:r,duration:a.end,delay:r[0].delay,endDelay:a.endDelay}}}(e,n)}))}))),(function(e){return!l.und(e)}))}function ee(e,n){var t=e.length,r=function(e){return e.timelineOffset?e.timelineOffset:0},a={};return a.duration=t?Math.max.apply(Math,e.map((function(e){return r(e)+e.duration}))):n.duration,a.delay=t?Math.min.apply(Math,e.map((function(e){return r(e)+e.delay}))):n.delay,a.endDelay=t?a.duration-Math.max.apply(Math,e.map((function(e){return r(e)+e.duration-e.endDelay}))):n.endDelay,a}var ne=0;var te,re=[],ae=[],oe=function(){function e(){te=requestAnimationFrame(n)}function n(n){var t=re.length;if(t){for(var r=0;r<t;){var a=re[r];if(a.paused){var o=re.indexOf(a);o>-1&&(re.splice(o,1),t=re.length)}else a.tick(n);r++}e()}else te=cancelAnimationFrame(te)}return e}();function ie(e){void 0===e&&(e={});var n,t=0,o=0,i=0,c=0,s=null;function l(e){var n=window.Promise&&new Promise((function(e){return s=e}));return e.finished=n,n}var f=function(e){var n=C(r,e),t=C(a,e),o=G(t,e),i=Q(e.targets),u=U(i,o),c=ee(u,t),s=ne;return ne++,E(n,{id:s,children:[],animatables:i,animations:u,duration:c.duration,delay:c.delay,endDelay:c.endDelay})}(e);l(f);function d(){var e=f.direction;"alternate"!==e&&(f.direction="normal"!==e?"normal":"reverse"),f.reversed=!f.reversed,n.forEach((function(e){return e.reversed=f.reversed}))}function p(e){return f.reversed?f.duration-e:e}function v(){t=0,o=p(f.currentTime)*(1/ie.speed)}function m(e,n){n&&n.seek(e-n.timelineOffset)}function h(e){for(var n=0,t=f.animations,r=t.length;n<r;){var a=t[n],o=a.animatable,i=a.tweens,c=i.length-1,s=i[c];c&&(s=w(i,(function(n){return e<n.end}))[0]||s);for(var l=u(e-s.start-s.delay,0,s.duration)/s.duration,d=isNaN(l)?1:s.easing(l),p=s.to.strings,v=s.round,m=[],h=s.to.numbers.length,g=void 0,y=0;y<h;y++){var b=void 0,x=s.to.numbers[y],M=s.from.numbers[y]||0;b=s.isPath?Y(s.value,d*x):M+d*(x-M),v&&(s.isColor&&y>2||(b=Math.round(b*v)/v)),m.push(b)}var L=p.length;if(L){g=p[0];for(var k=0;k<L;k++){p[k];var C=p[k+1],E=m[k];isNaN(E)||(g+=C?E+C:E+" ")}}else g=m[0];J[a.type](o.target,a.property,g,o.transforms),a.currentValue=g,n++}}function g(e){f[e]&&!f.passThrough&&f[e](f)}function y(e){var r=f.duration,a=f.delay,v=r-f.endDelay,y=p(e);f.progress=u(y/r*100,0,100),f.reversePlayback=y<f.currentTime,n&&function(e){if(f.reversePlayback)for(var t=c;t--;)m(e,n[t]);else for(var r=0;r<c;r++)m(e,n[r])}(y),!f.began&&f.currentTime>0&&(f.began=!0,g("begin")),!f.loopBegan&&f.currentTime>0&&(f.loopBegan=!0,g("loopBegin")),y<=a&&0!==f.currentTime&&h(0),(y>=v&&f.currentTime!==r||!r)&&h(r),y>a&&y<v?(f.changeBegan||(f.changeBegan=!0,f.changeCompleted=!1,g("changeBegin")),g("change"),h(y)):f.changeBegan&&(f.changeCompleted=!0,f.changeBegan=!1,g("changeComplete")),f.currentTime=u(y,0,r),f.began&&g("update"),e>=r&&(o=0,f.remaining&&!0!==f.remaining&&f.remaining--,f.remaining?(t=i,g("loopComplete"),f.loopBegan=!1,"alternate"===f.direction&&d()):(f.paused=!0,f.completed||(f.completed=!0,g("loopComplete"),g("complete"),!f.passThrough&&"Promise"in window&&(s(),l(f)))))}return f.reset=function(){var e=f.direction;f.passThrough=!1,f.currentTime=0,f.progress=0,f.paused=!0,f.began=!1,f.loopBegan=!1,f.changeBegan=!1,f.completed=!1,f.changeCompleted=!1,f.reversePlayback=!1,f.reversed="reverse"===e,f.remaining=f.loop,n=f.children;for(var t=c=n.length;t--;)f.children[t].reset();(f.reversed&&!0!==f.loop||"alternate"===e&&1===f.loop)&&f.remaining++,h(f.reversed?f.duration:0)},f.set=function(e,n){return K(e,n),f},f.tick=function(e){i=e,t||(t=i),y((i+(o-t))*ie.speed)},f.seek=function(e){y(p(e))},f.pause=function(){f.paused=!0,v()},f.play=function(){f.paused&&(f.completed&&f.reset(),f.paused=!1,re.push(f),v(),te||oe())},f.reverse=function(){d(),f.completed=!f.reversed,v()},f.restart=function(){f.reset(),f.play()},f.reset(),f.autoplay&&f.play(),f}function ue(e,n){for(var t=n.length;t--;)L(e,n[t].animatable.target)&&n.splice(t,1)}"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){document.hidden?(re.forEach((function(e){return e.pause()})),ae=re.slice(0),ie.running=re=[]):ae.forEach((function(e){return e.play()}))})),ie.version="3.2.0",ie.speed=1,ie.running=re,ie.remove=function(e){for(var n=X(e),t=re.length;t--;){var r=re[t],a=r.animations,o=r.children;ue(n,a);for(var i=o.length;i--;){var u=o[i],c=u.animations;ue(n,c),c.length||u.children.length||o.splice(i,1)}a.length||o.length||r.pause()}},ie.get=A,ie.set=K,ie.convertPx=I,ie.path=function(e,n){var t=l.str(e)?b(e)[0]:e,r=n||100;return function(e){return{property:e,el:t,svg:Z(t),totalLength:H(t)*(r/100)}}},ie.setDashoffset=function(e){var n=H(e);return e.setAttribute("stroke-dasharray",n),n},ie.stagger=function(e,n){void 0===n&&(n={});var t=n.direction||"normal",r=n.easing?y(n.easing):null,a=n.grid,o=n.axis,i=n.from||0,u="first"===i,c="center"===i,s="last"===i,f=l.arr(e),d=f?parseFloat(e[0]):parseFloat(e),p=f?parseFloat(e[1]):0,v=S(f?e[1]:e)||0,m=n.start||0+(f?d:0),h=[],g=0;return function(e,n,l){if(u&&(i=0),c&&(i=(l-1)/2),s&&(i=l-1),!h.length){for(var y=0;y<l;y++){if(a){var b=c?(a[0]-1)/2:i%a[0],w=c?(a[1]-1)/2:Math.floor(i/a[0]),x=b-y%a[0],M=w-Math.floor(y/a[0]),L=Math.sqrt(x*x+M*M);"x"===o&&(L=-x),"y"===o&&(L=-M),h.push(L)}else h.push(Math.abs(i-y));g=Math.max.apply(Math,h)}r&&(h=h.map((function(e){return r(e/g)*g}))),"reverse"===t&&(h=h.map((function(e){return o?e<0?-1*e:-e:Math.abs(g-e)})))}return m+(f?(p-d)/g:d)*(Math.round(100*h[n])/100)+v}},ie.timeline=function(e){void 0===e&&(e={});var n=ie(e);return n.duration=0,n.add=function(t,r){var o=re.indexOf(n),i=n.children;function u(e){e.passThrough=!0}o>-1&&re.splice(o,1);for(var c=0;c<i.length;c++)u(i[c]);var s=E(t,C(a,e));s.targets=s.targets||e.targets;var f=n.duration;s.autoplay=!1,s.direction=n.direction,s.timelineOffset=l.und(r)?f:q(r,f),u(n),n.seek(s.timelineOffset);var d=ie(s);u(d),i.push(d);var p=ee(i,e);return n.delay=p.delay,n.endDelay=p.endDelay,n.duration=p.duration,n.seek(0),n.reset(),n.autoplay&&n.play(),n},n},ie.easing=y,ie.penner=g,ie.random=function(e,n){return Math.floor(Math.random()*(n-e+1))+e};var ce=ie,se=function(){var e=0,n=[],t=0,r=document.querySelector(".navbar"),a=5e3,o=800,i=0,u=!1,c=!1,s=!1,l=!1,f=document.querySelector("#site-header");function d(){i=0;var n=document.querySelector("#newsHeadline");n.classList.remove("activeNewsLink"),n.classList.add("disabledNewsLink"),setTimeout((function(){p(t=(t+1)%e)}),a)}function p(e){var t=l.querySelector("#newsHeadline");t&&s.removeChild(t),s.appendChild(n[e]),setTimeout((function(){n[e].classList.remove("disabledNewsLink"),n[e].classList.add("activeNewsLink"),n[e].offsetWidth>s.offsetWidth+10?n[e].classList.add("overflowing"):n[e].classList.remove("overflowing")}),100)}fetch("/wp-json/wp/v2/newsOptions").then((function(e){return e.json()})).then((function(v){a=parseInt(v.animation_transition_time),o=parseInt(v.animation_pause_time),v.enabled?(r.classList.add("news-top-margin"),fetch("/wp-json/wp/v2/newsheadline").then((function(e){return e.json()})).then((function(r){var v;v=[],r.forEach((function(n){var t=document.createElement("a");t.classList.add("newsLink","animate"),t.id="newsHeadline",t.href=n.url,t.style.transition="opacity "+a+"ms ease-in",e++;var r=document.createTextNode(n.title.rendered);t.appendChild(r),v.push(t)})),(n=v).length>0&&(!function(){(l=document.createElement("div")).classList.add("newsreel-container","carousel"),l.id="newsreel-container",function(){var n=document.createElement("button");n.classList.add("flickity-button","flickity-prev-next-button","previous"),n.type="button";var r=document.createElement("svg");r.classList.add("flickity-button-icon"),r.setAttribute("viewBox","0 0 100 100");var o=document.createElement("path");o.setAttribute("d","M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z"),o.classList.add("arrow"),r.appendChild(o),n.appendChild(r),(s=document.createElement("div")).classList.add("headline-container"),s.id="headline-container",s.onmouseover=function(e){u=!0},s.onmouseout=function(e){u=!1};var f=document.createElement("button");f.classList.add("flickity-button","flickity-prev-next-button","next"),f.type="button";var v=document.createElement("svg");v.classList.add("flickity-button-icon"),v.setAttribute("viewBox","0 0 100 100");var m=document.createElement("path");m.setAttribute("d","M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z"),m.classList.add("arrow"),v.appendChild(m),f.appendChild(v);var h=document.createElement("button");h.classList.add("pause-button"),h.onclick=function(e){c=!c,h.classList.toggle("paused")},n.onclick=function(n){!function(){i=0;var n=document.querySelector("#newsHeadline");n.classList.remove("activeNewsLink"),n.classList.add("disabledNewsLink"),setTimeout((function(){p(t=0===t?e-1:(t-1)%e)}),a)}()},f.onclick=function(e){d()},l.appendChild(n),l.appendChild(s),l.appendChild(f),l.appendChild(h)}();var n=document.createTextNode("");l.appendChild(n),f.appendChild(l)}(),p(t),setInterval((function(){c||u||(i+=1e3/30),i>o+2*a&&d()}),1e3/30))}))):r.classList.remove("news-top-margin")}))},le=document.querySelectorAll('section.section .grid [class*="grid-"], .box.box-panel ul li, .post-type-archive .breadcrumbs-wrapper + .grid .grid--columns > [class*="grid-"], .main-footer .widget_text, .main-footer .logotype, .main-footer .widget_nav_menu, .slider .slider-image > span'),fe=new IntersectionObserver((function(e){e.forEach((function(e){e.isIntersecting&&ce({targets:e.target,opacity:[0,1],translateY:["0","20px"],easing:"spring(1, 80, 10, 0)",delay:150})}))}),{threshold:.2,rootMargin:"40px"});le.forEach((function(e){fe.observe(e)})),ce({targets:".home .logotype .letter",opacity:[0,1],delay:ce.stagger(150,{start:0})});var de=document.querySelectorAll(".home .box.box-post-brick .post-title");de.length>0&&window.fitText(de,.9,{minFontSize:"30px",maxFontSize:"50px"}),$(document).ready((function(){$(".section-text").filter((function(){return!$(this).text().replace(/\s*/g,"")})).hide()})),window.addEventListener("DOMContentLoaded",(function(e){var n,t;n=document.querySelector("#main-menu"),t=document.querySelectorAll(".js-dropdown"),n.onmouseover=function(e){t.forEach((function(e){e.classList.add("is-active")}))},n.onmouseout=function(e){t.forEach((function(e){e.classList.remove("is-active")}))},se()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=app.55bd6c218e8199018ff4.js.map